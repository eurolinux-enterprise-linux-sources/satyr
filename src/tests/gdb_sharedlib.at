# Checking the satyr. -*- Autotest -*-

AT_BANNER([GDB sharedlib])

## ---------------------- ##
## sr_gdb_sharedlib_parse ##
## ---------------------- ##
AT_TESTFUN([sr_gdb_sharedlib_parse],
[[
#include "gdb/sharedlib.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  char *error_message;
  char *bt = sr_file_to_string("../../gdb_stacktraces/rhbz-621492", &error_message);
  assert(bt);
  struct sr_gdb_sharedlib *libs = sr_gdb_sharedlib_parse(bt);
  assert(libs);
  assert(libs->from == 0x0000003848c05640);
  assert(libs->to == 0x0000003848c10e48);
  assert(libs->symbols == SYMS_OK);
  assert(strcmp("/lib64/libpthread.so.0", libs->soname) == 0);
  sr_gdb_sharedlib_free(libs);
  return 0;
}
]])

## ---------------------- ##
## sr_gdb_sharedlib_count ##
## ---------------------- ##
AT_TESTFUN([sr_gdb_sharedlib_count],
[[
#include "gdb/sharedlib.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  char *error_message;
  char *bt = sr_file_to_string("../../gdb_stacktraces/rhbz-621492", &error_message);
  assert(bt);
  struct sr_gdb_sharedlib *libs = sr_gdb_sharedlib_parse(bt);
  assert(libs);
  assert(sr_gdb_sharedlib_count(libs) == 185);
  sr_gdb_sharedlib_free(libs);
  return 0;
}
]])

## ----------------------- ##
## sr_gdb_sharedlib_append ##
## ----------------------- ##
AT_TESTFUN([sr_gdb_sharedlib_append],
[[
#include "gdb/sharedlib.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  struct sr_gdb_sharedlib *lib1 = sr_gdb_sharedlib_new();
  assert(lib1);
  struct sr_gdb_sharedlib *lib2 = sr_gdb_sharedlib_new();
  assert(lib2);
  assert(sr_gdb_sharedlib_count(lib1) == 1);
  assert(sr_gdb_sharedlib_count(lib2) == 1);
  sr_gdb_sharedlib_append(lib1, lib2);
  assert(sr_gdb_sharedlib_count(lib1) == 2);
  assert(sr_gdb_sharedlib_count(lib2) == 1);
  sr_gdb_sharedlib_free(lib1);
  return 0;
}
]])

## ----------------------------- ##
## sr_gdb_sharedlib_find_address ##
## ----------------------------- ##
AT_TESTFUN([sr_gdb_sharedlib_find_address],
[[
#include "gdb/sharedlib.h"
#include "utils.h"
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  char *error_message;
  char *bt = sr_file_to_string("../../gdb_stacktraces/rhbz-621492", &error_message);
  assert(bt);
  struct sr_gdb_sharedlib *libs = sr_gdb_sharedlib_parse(bt);
  assert(libs);
  assert(sr_gdb_sharedlib_find_address(libs, 0x0000003848c08000));
  assert(sr_gdb_sharedlib_find_address(libs, 0x00007f907d3f0000));
  assert(!sr_gdb_sharedlib_find_address(libs, 0));
  assert(!sr_gdb_sharedlib_find_address(libs, 0xffff00000000ffff));
  sr_gdb_sharedlib_free(libs);
  return 0;
}
]])
