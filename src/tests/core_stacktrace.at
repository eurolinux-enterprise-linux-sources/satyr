# Checking the satyr. -*- Autotest -*-

AT_BANNER([Core stacktraces])

## -------------------------- ##
## sr_core_stacktrace_to_json ##
## -------------------------- ##

AT_TESTFUN([sr_core_stacktrace_to_json],
[[
#include "stacktrace.h"
#include "core/stacktrace.h"
#include "core/thread.h"
#include "core/frame.h"
#include "utils.h"
#include <assert.h>
#include <signal.h>

int
main(void)
{
  struct sr_core_frame *frame1 = sr_core_frame_new();
  frame1->address = 0xffffffff0;
  frame1->build_id = sr_strdup("aabbccddeeff0");
  frame1->build_id_offset = 2560;
  frame1->function_name = sr_strdup("test0");
  frame1->file_name = sr_strdup("executable0");

  struct sr_core_frame *frame0 = sr_core_frame_new();;
  frame0->address = 0xffffffff1;
  frame0->build_id = sr_strdup("aabbccddeeff1");
  frame0->build_id_offset = 2561;
  frame0->function_name = sr_strdup("test1");
  frame0->file_name = sr_strdup("executable1");
  frame0->fingerprint = sr_strdup("ab");
  frame0->next = frame1;

  struct sr_core_thread *thread1 = sr_core_thread_new();
  thread1->frames = frame0;

  struct sr_core_frame *frame3 = sr_core_frame_new();
  frame3->address = 0xffffffff3;
  frame3->build_id = sr_strdup("aabbccddeeff3");
  frame3->build_id_offset = 2563;
  frame3->function_name = sr_strdup("test3");
  frame3->file_name = sr_strdup("executable3");

  struct sr_core_frame *frame2 = sr_core_frame_new();;
  frame2->address = 0xffffffff2;
  frame2->build_id = sr_strdup("aabbccddeeff2");
  frame2->build_id_offset = 2562;
  frame2->function_name = sr_strdup("test2");
  frame2->file_name = sr_strdup("executable2");
  frame2->fingerprint = sr_strdup("ab");
  frame2->next = frame3;

  struct sr_core_thread *thread0 = sr_core_thread_new();
  thread0->frames = frame2;
  thread0->next = thread1;

  struct sr_core_stacktrace *stacktrace = sr_core_stacktrace_new();
  stacktrace->signal = SIGKILL;
  stacktrace->crash_thread = thread1;
  stacktrace->threads = thread0;

  char *reason = sr_core_stacktrace_get_reason(stacktrace);
  assert(reason);
  free(reason);

  reason = sr_stacktrace_get_reason((struct sr_stacktrace*) stacktrace);
  assert(reason);
  free(reason);

  char *json = sr_core_stacktrace_to_json(stacktrace);
  puts(json);
  assert(0 == strcmp(json,
            "{   \"signal\": 9\n"
            ",   \"stacktrace\":\n"
            "      [ {   \"frames\":\n"
            "              [ {   \"address\": 68719476722\n"
            "                ,   \"build_id\": \"aabbccddeeff2\"\n"
            "                ,   \"build_id_offset\": 2562\n"
            "                ,   \"function_name\": \"test2\"\n"
            "                ,   \"file_name\": \"executable2\"\n"
            "                ,   \"fingerprint\": \"ab\"\n"
            "                }\n"
            "              , {   \"address\": 68719476723\n"
            "                ,   \"build_id\": \"aabbccddeeff3\"\n"
            "                ,   \"build_id_offset\": 2563\n"
            "                ,   \"function_name\": \"test3\"\n"
            "                ,   \"file_name\": \"executable3\"\n"
            "                } ]\n"
            "        }\n"
            "      , {   \"crash_thread\": true\n"
            "        ,   \"frames\":\n"
            "              [ {   \"address\": 68719476721\n"
            "                ,   \"build_id\": \"aabbccddeeff1\"\n"
            "                ,   \"build_id_offset\": 2561\n"
            "                ,   \"function_name\": \"test1\"\n"
            "                ,   \"file_name\": \"executable1\"\n"
            "                ,   \"fingerprint\": \"ab\"\n"
            "                }\n"
            "              , {   \"address\": 68719476720\n"
            "                ,   \"build_id\": \"aabbccddeeff0\"\n"
            "                ,   \"build_id_offset\": 2560\n"
            "                ,   \"function_name\": \"test0\"\n"
            "                ,   \"file_name\": \"executable0\"\n"
            "                } ]\n"
            "        } ]\n"
            "}"));

  char *json2 = sr_stacktrace_to_json((struct sr_stacktrace*) stacktrace);
  assert(0 == strcmp(json, json2));

  sr_core_stacktrace_free(stacktrace);
  return 0;
}
]])

## ---------------------------- ##
## sr_core_stacktrace_from_json ##
## ---------------------------- ##

AT_TESTFUN([sr_core_stacktrace_from_json],
[[
#include "stacktrace.h"
#include "core/stacktrace.h"
#include "core/thread.h"
#include "core/frame.h"
#include "utils.h"
#include "report_type.h"
#include <assert.h>
#include <signal.h>

void
check(struct sr_core_stacktrace *stacktrace)
{
  assert(stacktrace);
  assert(stacktrace->signal == SIGABRT);
  assert(stacktrace->executable);
  assert(0 == strcmp(stacktrace->executable, "/usr/bin/will_abort"));
  assert(stacktrace->threads);

  assert(stacktrace->threads->next);
  assert(stacktrace->crash_thread == stacktrace->threads->next);

  struct sr_core_frame *f = stacktrace->threads->frames;
  assert(f->address == 87654);
  assert(0 == strcmp(f->build_id, "92ebaf825e4f492952c45189cb9ffc6541f8599b"));
  assert(f->build_id_offset == 42);
  assert(0 == strcmp(f->function_name, "fake_frame_for_the_sake_of_multiple_threads"));
  assert(0 == strcmp(f->file_name, "/usr/bin/will_abort"));
  assert(f->fingerprint == NULL);

  f = f->next;
  assert(f->address == 98346);
  assert(0 == strcmp(f->build_id, "92ebaf825e4f492952c45189cb9ffc6541f8599b"));
  assert(f->build_id_offset == 10734);
  assert(0 == strcmp(f->function_name, "fake_function"));
  assert(0 == strcmp(f->file_name, "/usr/bin/will_abort"));
  assert(f->fingerprint == NULL);

  f = stacktrace->threads->next->frames;
  assert(f->address == 237190207797);
  assert(0 == strcmp(f->build_id, "cc10c72da62c93033e227ffbe2670f2c4fbbde1a"));
  assert(f->build_id_offset == 219445);
  assert(0 == strcmp(f->function_name, "raise"));
  assert(0 == strcmp(f->file_name, "/usr/lib64/libc-2.15.so"));
  assert(0 == strcmp(f->fingerprint, "f33186a4c862fb0751bca60701f553b829210477"));

  f = f->next->next->next;
  assert(f->address == 237190125365);
  assert(0 == strcmp(f->build_id, "cc10c72da62c93033e227ffbe2670f2c4fbbde1a"));
  assert(f->build_id_offset == 137013);
  assert(0 == strcmp(f->function_name, "__libc_start_main"));
  assert(0 == strcmp(f->file_name, "/usr/lib64/libc-2.15.so"));
  assert(0 == strcmp(f->fingerprint, "5ff4a3d3743fdde711c49033d1e01784477e57fb"));
}

int
main(void)
{
  char *error_message;
  char *full_input = sr_file_to_string("../../json_files/core-01", &error_message);
  assert(full_input);

  struct sr_core_stacktrace *stacktrace = sr_core_stacktrace_from_json_text(full_input,
     &error_message);
  check(stacktrace);
  sr_core_stacktrace_free(stacktrace);

  stacktrace = (struct sr_core_stacktrace*) sr_stacktrace_parse(SR_REPORT_CORE,
     full_input, &error_message);
  check(stacktrace);
  sr_stacktrace_free((struct sr_stacktrace*) stacktrace);

  return 0;
}
]])
