AT_BANNER([Clustering])

AT_TESTFUN([sr_distances_cluster_objects],
[
#include "distance.h"
#include "cluster.h"
#include <assert.h>
#include <stdio.h>

bool
is_dist_equal(float x, float y)
{
  float epsilon = 1e-6;
  return x - epsilon <= y && x + epsilon >= y;
}

int
main()
{
  struct sr_distances *distances;
  struct sr_dendrogram *dendrogram;
  
  distances = sr_distances_new(3, 4);
  sr_distances_set_distance(distances, 0, 1, 1.0);
  sr_distances_set_distance(distances, 0, 2, 0.5);
  sr_distances_set_distance(distances, 0, 3, 0.0);
  sr_distances_set_distance(distances, 1, 2, 0.1);
  sr_distances_set_distance(distances, 1, 3, 0.3);
  sr_distances_set_distance(distances, 2, 3, 0.7);

  dendrogram = sr_distances_cluster_objects(distances);

  assert(dendrogram->size == 4);

  assert(dendrogram->order[[0]] == 0);
  assert(dendrogram->order[[1]] == 3);
  assert(dendrogram->order[[2]] == 1);
  assert(dendrogram->order[[3]] == 2);

  assert(is_dist_equal(dendrogram->merge_levels[[0]], 0.0));
  assert(is_dist_equal(dendrogram->merge_levels[[1]], 0.625));
  assert(is_dist_equal(dendrogram->merge_levels[[2]], 0.1));

  distances = sr_distances_new(1, 6);
  sr_distances_set_distance(distances, 0, 1, 1.0);
  sr_distances_set_distance(distances, 0, 2, 0.5);
  sr_distances_set_distance(distances, 0, 3, 0.3);
  sr_distances_set_distance(distances, 0, 4, 0.0);
  sr_distances_set_distance(distances, 0, 5, 0.9);

  dendrogram = sr_distances_cluster_objects(distances);

  assert(dendrogram->size == 6);

  assert(dendrogram->order[[0]] == 0);
  assert(dendrogram->order[[1]] == 4);
  assert(dendrogram->order[[2]] == 3);
  assert(dendrogram->order[[3]] == 2);
  assert(dendrogram->order[[4]] == 5);
  assert(dendrogram->order[[5]] == 1);

  assert(is_dist_equal(dendrogram->merge_levels[[0]], 0.0));
  assert(is_dist_equal(dendrogram->merge_levels[[1]], 0.3));
  assert(is_dist_equal(dendrogram->merge_levels[[2]], 0.5));
  assert(is_dist_equal(dendrogram->merge_levels[[3]], 0.9));
  assert(is_dist_equal(dendrogram->merge_levels[[4]], 1.0));

  return 0;
}
])

AT_TESTFUN([sr_dendrogram_cut],
[
#include "cluster.h"
#include <assert.h>
#include <stdio.h>

int
main()
{
  struct sr_dendrogram *dendrogram;
  struct sr_cluster *cluster;

  dendrogram = sr_dendrogram_new(6);

  dendrogram->order[[0]] = 0;
  dendrogram->order[[1]] = 3;
  dendrogram->order[[2]] = 1;
  dendrogram->order[[3]] = 2;
  dendrogram->order[[4]] = 4;
  dendrogram->order[[5]] = 5;

  dendrogram->merge_levels[[0]] = 0.0;
  dendrogram->merge_levels[[1]] = 0.6;
  dendrogram->merge_levels[[2]] = 0.1;
  dendrogram->merge_levels[[3]] = 0.5;
  dendrogram->merge_levels[[4]] = 0.3;

  cluster = sr_dendrogram_cut(dendrogram, 0.2, 1);

  assert(cluster);

  assert(cluster->size == 1);
  assert(cluster->objects[[0]] == 5);
  assert(cluster->next);
  cluster = cluster->next;

  assert(cluster->size == 1);
  assert(cluster->objects[[0]] == 4);
  assert(cluster->next);
  cluster = cluster->next;

  assert(cluster->size == 2);
  assert(cluster->objects[[0]] == 1);
  assert(cluster->objects[[1]] == 2);
  assert(cluster->next);
  cluster = cluster->next;

  assert(cluster->size == 2);
  assert(cluster->objects[[0]] == 0);
  assert(cluster->objects[[1]] == 3);

  assert(!cluster->next);

  cluster = sr_dendrogram_cut(dendrogram, 0.5, 3);

  assert(cluster);

  assert(cluster->size == 4);
  assert(cluster->objects[[0]] == 1);
  assert(cluster->objects[[1]] == 2);
  assert(cluster->objects[[2]] == 4);
  assert(cluster->objects[[3]] == 5);

  assert(!cluster->next);

  return 0;
}
])
