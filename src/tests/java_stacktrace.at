# Checking the satyr. -*- Autotest -*-

AT_BANNER([Java stacktrace])

## ---------------------- ##
## sr_java_stacktrace_cmp ##
## ---------------------- ##
AT_TESTFUN([sr_java_stacktrace_cmp],
[[
#include "java/stacktrace.h"
#include "java/thread.h"
#include "java/frame.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_stacktrace *stacktrace0 = sr_java_stacktrace_new();
  stacktrace0->threads = create_real_main_thread_objects();

  struct sr_java_stacktrace *stacktrace1 = sr_java_stacktrace_new();
  stacktrace1->threads = create_real_main_thread_objects();

  assert(0 == sr_java_stacktrace_cmp(stacktrace0, stacktrace1));

  sr_java_thread_free(stacktrace1->threads);
  stacktrace1->threads = NULL;

  assert(0 != sr_java_stacktrace_cmp(stacktrace0, stacktrace1));

  sr_java_stacktrace_free(stacktrace0);
  sr_java_stacktrace_free(stacktrace1);

  return 0;
}
]])

## ---------------------- ##
## sr_java_stacktrace_dup ##
## ---------------------- ##
AT_TESTFUN([sr_java_stacktrace_dup],
[[
#include "java/stacktrace.h"
#include "java/thread.h"
#include "java/frame.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include "java_testcases.c"

int
main(void)
{
  struct sr_java_stacktrace *stacktrace0 = create_real_main_thread_objects();
  stacktrace0->threads = create_real_main_thread_objects();

  struct sr_java_stacktrace *stacktrace1 = sr_java_stacktrace_dup(stacktrace0);

  assert(0 == sr_java_stacktrace_cmp(stacktrace0, stacktrace1));

  sr_java_stacktrace_free(stacktrace0);
  sr_java_stacktrace_free(stacktrace1);

  return 0;
}
]])

## ------------------------ ##
## sr_java_stacktrace_parse ##
## ------------------------ ##
AT_TESTFUN([sr_java_stacktrace_parse],
[[
#include "java/stacktrace.h"
#include "java/thread.h"
#include "java/frame.h"
#include "location.h"
#include "stacktrace.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#include "java_testcases.c"

static void
check(char *input,
      struct sr_java_stacktrace *expected_stacktrace)
{
  printf("===============================================\n"
         "Testing input:\n%s", input);

  char *old_input = input;
  struct sr_location location;
  sr_location_init(&location);
  struct sr_java_stacktrace *stacktrace = sr_java_stacktrace_parse(&input, &location);
  assert(!expected_stacktrace || stacktrace);
  if (stacktrace)
  {
    assert(*input == '\0');
    assert(0 == sr_java_stacktrace_cmp(stacktrace, expected_stacktrace));

    /* check sr_stacktrace_parse */
    char *error;
    input = old_input;
    struct sr_stacktrace *stacktrace2 = sr_stacktrace_parse(SR_REPORT_JAVA, input, &error);
    assert(stacktrace2);
    char *json1 = sr_stacktrace_to_json(stacktrace);
    char *json2 = sr_stacktrace_to_json(stacktrace2);
    assert(json1 && json2 && 0 == strcmp(json1, json2));
    free(json1);
    free(json2);
    sr_stacktrace_free(stacktrace2);

    sr_java_stacktrace_free(stacktrace);
  }
  else
  {
    /* Check that the pointer is not moved. */
    assert(old_input == input);
    assert(!expected_stacktrace);
  }
}

int
main(void)
{
  struct sr_java_stacktrace *stacktrace0 = create_real_main_thread_objects();
  stacktrace0->threads = create_real_main_thread_objects();

  check(get_real_thread_stacktrace(), stacktrace0);

  return 0;
}
]])

## ------------------------- ##
## sr_java_stacktrace_reason ##
## ------------------------- ##
AT_TESTFUN([sr_java_stacktrace_reason],
[[
#include "java/stacktrace.h"
#include "location.h"
#include "utils.h"
#include <assert.h>

int main(void)
{
  char *err_msg = NULL;
  char *full_input = sr_file_to_string("../../java_stacktraces/java-01",
                                       &err_msg);
  assert(full_input && err_msg == NULL);

  struct sr_location loc;
  struct sr_java_stacktrace *s = sr_java_stacktrace_parse(&full_input, &loc);
  assert(s);

  char *reason = sr_java_stacktrace_get_reason(s);
  assert(reason);
  free(reason);

  return 0;
}
]])
